Relational Algebra

Definition:- Relational algebra is a query technique that uses algebraic formulas to model data and interpret data queries. It takes the relationship instance as input and returns the relationship as output, using operators to perform queries. One level of relational algebra expertise is called relational algebra expression.


Relational algebra has mainly 9 types of operators.
1. UNION
2. INTERSECTION
3. MINUS
4. TIMES
5. SELECTION
6. PROJECTION
7. JOIN
8. DIVISION
9. RENAME
10. Set Difference
11. Set Intersection
12. Cartesian Product


UNION:- A and B are two relations. It shows the total value (attitude) in two relationships. It disrupts the balance of the relationship. The symbol U may be used.

Syntax:- A UNION B (or) A U B

Example:- 
A = { clerk, manager, salesman}
B = { president, clerk, manager}
A UNION B = {clerk, manager, salesman, president}


Intersection (∩):- A and B are two relations. It shows the context of both relationships. The "∩" symbol can be used.

Syntax:- A INTERSECT B (or) A ∩ B

Example:-
A = { clerk, manager, salesman}
B = { president, clerk, manager}
A INTERSECT B = { clerk, manager}


DIFFERENCE (─):- A and B are two relations. It shows the content in relationship A but not the content in relationship B.

Syntax:- A MINUS B (OR) A ─ B

Example:-
A = { clerk, manager, salesman}
B = { president, clerk, manager}
A MINUS B = {salesman}


CARTESIAN PRODUCT(X):- A and B are two relations. It has a new relation consisting of all pair wises combinations of all elements in A and B. The relation A has “m” elements and relation B has “n” elements, then the resultant relation will be “ m * n “.

Syntax:- A TIMES B (OR) A X B

Example:- 
A = { clerk, manager, salesman}
B = { president, clerk, manager}
A TIMES B = { (clerk, president), 
(clerk, clerk),(clerk, manager), 
(manager, president), (manager, clerk),
(manager, manager),(salesman, president), 
(salesman, clerk), (salesman, manager) }


SELECTION (σ):- Shows all attributes or systems for each row in the relationship. "σ" can be used to choose behavior in the relationship.
In general SELECT operation is denoted by
(σ)(R)
(σ)(Sigma): SELECT operator
θ: Selection condition
R: Relation or relational algebra expression.

Syntax:- σ condition (relation name)


PROJECTION (π):- It shows some systems listed in the relationship. Operator "π" can be used to select certain systems relative to each other. Selects tuples from a relation satisfying the given set. Shows some systems defined using some conditions.

Syntax:- π(col1,col2…) Relation Name

Example:-
π(sno, sname, total) MARKS


JOIN( ):- It combines two or more relationships. Symbols can be used. Most of them can be divided into 4 types. These are usually
Inner Join
Outer Join
Left Outer Join
Right Outer Join


DIVIDE (÷):- Distributes tuples from one relation to another

Syntax:- A DIVIDE B (OR) A ÷ B

Example:-
A = { clerk, manager, salesman} 
B = { clerk, manager}
A DIVIDE B = {salesman}


RENAME(ρ):- It gives the relationship another name.

Syntax:- ρ(OLD RELATION, NEW RELATION)

Example:- 
ρ(STUDENT, MARKS)
It changes the “student” relation to the “Marks” relation.
It also renames the specified column.
It changes the old-column name to the new-column name.


Set Difference(-):- Identifying differences in relational algebra is the same as identifying differences in theory.

Syntax:- π(Student_Name)FRENCH - π(Student_Name)GERMAN


Set Intersection(∩):- Set Intersection in relational algebra is the same as Set Intersection in theory.

Syntax:- π(Student_Name)FRENCH ∩ π(Student_Name)GERMAN


Cross Product(X):- Cross-product between two relations. Let’s say A and B, so the cross product between A X B will result in all the attributes of A followed by each attribute of B. Each record of A will pair with every record of B.


Advantages of Relational Algebra:-

Efficiency: Relational algebra is optimized for efficiency and performance; This means that queries can be executed quickly using limited resources. This is especially important for large, complex files where performance is critical.

Simplicity: Relational algebra provides a simple and easy-to-understand set of operators for data management. Since it is based on mathematical principles and concepts, it makes it easier to learn and use.

Portability: Relational algebra is independent of any database management system; This means queries can be easily transferred to other systems. This makes it easy to switch between different repositories or vendors without having to rewrite the query.

Disadvantages of Relational Algebra:-

Performance limitations: Although relational algebra is optimized for performance and performance, it may not handle large or complex data. When processing large files or complex queries, queries can be slow and resource-intensive.

Lack of integration: Relational algebra is often used with other programming languages ​​and tools, which can create integration problems. Integrating relational algebra with other systems and tools will require additional work.

Limited data: Relational algebra is designed for simple data such as numbers, strings, and dates. It may not be suitable for more complex data types such as multimedia archives or spatial data.

