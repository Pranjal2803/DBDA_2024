Strategies for Schema design:-

1. Top-down strategy:–
2. Bottom-up strategy:–
3. Inside-Out Strategy:–
4. Mixed Strategy:–

Top-down strategy:-
In this strategy, we start with a model with high-level content and then use the high-level application. Let's try to understand this with an example, we can show only a few levels of the site type and then show its properties and divide it into lower-level types and relationships. The special technique of dividing worksites into subcategories also exemplifies the advantages here.

Bottom-up strategy:–
In this type of strategy, we start with a basic abstraction and then continue to add to that perspective. For example, we can start with attributes and place them into types and relationships. As an improvement, we can also add new relationships between site types. The main paradigm is the process of generalizing parts into higher-level generalized superordinate categories.

Inside-Out Strategy:–
This is a special feature of the basic concept that attention is the most prominent central process. Modeling is essentially going out and thinking of new ideas alongside existing ones. We can clearly identify a few types in the diagram and continue adding other interrelated fields and relationships.

Mixed Strategy:–
No specific concept was used throughout the design process, but the needs were divided according to the top-down concept, and after combining several models, partial models were obtained, and designed according to the basic strategy for each deployment.


Normalization:-
Split large tables into smaller tables to reduce data duplication and ensure data consistency.
Reduces the need for multiple updates to maintain consistency.
Remove suspicious data such as update, insertion and deletion errors.
The result is a versatile schema consisting of multiple tables and relationships.
Performance questions can be confusing because so many people need to be involved.

Denormalization:-
Add data redundancy to improve query performance by reducing the number of connections required.
Make it easier to access information by keeping all your information in one place.
If not managed correctly, data inconsistencies may occur.
Needs are increasing due to data balance. Simplify and make queries faster by reducing the number of joins required

Vertical partitioning:-
Divide the table into smaller tables based on the order of organizing the questions.
Reduces I/O operations by reading key lines from the disk.
Make data easier to access by storing data in tables with fewer rows.
Many schemas will appear, containing many tables and relationships.
If a query requires rows from more than one table, this will negatively impact the query

Horizontal partitioning:-
Split the table by rows into smaller tables to improve query performance and scalability.
Easily manage data by splitting large tables into smaller, more manageable areas.
Improve query performance by reducing the amount of data that needs to be analyzed.
Many schemas will appear, containing many tables and relationships.
If the query requires data from more than one partition, it may affect query performance.
